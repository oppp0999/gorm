
1. ORM
ORM(Object-relation mapping)은 객체지향 프로그래밍 언어를 사용해서 서로 다른 시스템간에 데이터를 호환성있게 변환하기 위해서 사용하는 프로그래밍 기술이다. ORM을 사용 할 경우 실실적으로 프로그래밍 언어에서 사용 할 수 있는 가상 객체 데이터베이스를 생성한다. 이 가상 객체 데이터베이스는 클래스(혹은 스트럭처)와 맵핑된다. 결과적으로 개발자는 객체를 다루는 것처럼 데이터를 다룰 수 있으며, 데이터베이스를 코드에 자연스럽게 녹여낼 수 있게 된다.
ORM을 사용하면 데이터베이스 프로그래밍이 편해지기 때문에 다양한 무료/상영업 패키지들이 있다.
객체지향 프로그래밍에서 데이터는 스칼라가 아닌 객체단위로 관리한다. 예를 들어 유저 정보를 관리하는 프로그램이라면 UserInfo 클래스를 만들고 여기에 이름, 주소, 나이 등을 객체요소로 묶는다. 여기에 메서드를 이용해서 이들 객체 데이터를 관리/조작한다.
반면 RDBMS는 테이블내에 구성된 정수와 문자열 같은 스칼라 값만 저장하고 조작 할 수 있다. 따라서 프로그래머는 객체를 스칼라 값으로 변환하는 등의 추가적인 작업을 해야 한다. 전혀 다른 타입의 두 데이터를 묶는 까다로운 작업으로 많은 실수들이 발생 할 수 있다.
ORM을 이용해서 개발자는 객체의 논리적 표현을 데이터베이스에 저장 할 수 있는 형태로 변환하는 동시에 객체의 속성과 관계를 유지할 수 있다.'


-gorm

완전한 기능을 가진 ORM
Associations (Has One, Has Many, Belongs To, Many To Many, Polymorphism, Single-table inheritance)
Hooks (Before/After Create/Save/Update/Delete/Find)
Preload, Joins를 통한 데이터 가져오기
Transactions, Nested Transactions, Save Point, RollbackTo to Saved Point
Context, Prepared Statement Mode, DryRun Mode
Batch Insert, FindInBatches, Find/Create with Map, CRUD with SQL Expr and Context Valuer
SQL Builder, Upsert, Locking, Optimizer/Index/Comment Hints, Named Argument, SubQuery
Composite Primary Key, Indexes, Constraints
Auto Migrations
Logger
확장 가능하고 유연한 플러그인 API: Database Resolver (다중 데이터베이스, 읽기 / 쓰기 분할) / Prometheus…
모든 기능들은 테스트와 함께 제공됩니다
개발자 친화적






gorm은 mysql, postgres, sqlite3, mssqld을 지원한다.

// postgres
import (
  "github.com/jinzhu/gorm"
  _ "github.com/jinzhu/gorm/dialects/postgres"
)

func main() {
  db, err := gorm.Open("postgres", "host=myhost port=myport user=gorm dbname=gorm password=mypassword")
  defer db.Close()
}

//sqlite3
import (
  "github.com/jinzhu/gorm"
  _ "github.com/jinzhu/gorm/dialects/sqlite"
)

func main() {
  db, err := gorm.Open("sqlite3", "/tmp/gorm.db")
  defer db.Close()
}

// mssql
import (
  "github.com/jinzhu/gorm"
  _ "github.com/jinzhu/gorm/dialects/mssql"
)

func main() {
  db, err := gorm.Open("mssql", "sqlserver://username:password@localhost:1433?database=dbname")
  defer db.Close()
}
단, 사용하는 디비의 드라이브를 import해야 합니다. 

​

· 모델(스키마) 생성

golang은 클래스 개념이나 DTO 개념이 없습니다. 대신 구조체라는 개념이 있는데 구조체를 이용하여 모델을 만들 수 있습니다.

import (
	"fmt"
	"time"

	_ "github.com/go-sql-driver/mysql"
	"github.com/jinzhu/gorm"
)

type Products struct {
	gorm.Model
	ID         uint64 `gorm:"primary_key"`
	Code       string
	Price      uint
	created_at time.Time
	updated_at time.Time
	deleted_at *time.Time
}
모델을 만들땐 해당 구조체에 gorm.Model을 임베디드 해줍니다. 상속과 비슷한 개념으로 이해하셔도 됩니다.